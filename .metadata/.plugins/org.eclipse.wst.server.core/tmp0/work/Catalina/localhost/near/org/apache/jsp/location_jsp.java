/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-10-17 07:47:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class location_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1696897873775L));
    _jspx_dependants.put("jar:file:/C:/khs/NearByDocProj/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/NearByProj/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200\" />\r\n");
      out.write("<title>위치설정</title>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("* {\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	font-family: \"Noto Sans\", sans-serif;\r\n");
      out.write("	color: #333333;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("a {\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".outerDiv {\r\n");
      out.write("	width: 430px;\r\n");
      out.write("	height: 100%;\r\n");
      out.write("	background-color: white;\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	text-align: left;\r\n");
      out.write("	padding: 10px 0;\r\n");
      out.write("	position: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".outerDiv .locationset {\r\n");
      out.write("	height: 50px;\r\n");
      out.write("	background-color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".outerDiv .locationset .juso button {\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 15px;\r\n");
      out.write("	background-color: #fff;\r\n");
      out.write("	color: #333333;\r\n");
      out.write("	width: 100px;\r\n");
      out.write("	height: 29px;\r\n");
      out.write("	line-height: 29px;\r\n");
      out.write("	border-radius: 20px;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	display: inline-block;\r\n");
      out.write("	font-family: \"Noto Sans\", sans-serif;\r\n");
      out.write("	font-size: 15px;\r\n");
      out.write("	transition: background-color 0.3s;\r\n");
      out.write("	border: none;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".find {\r\n");
      out.write("	margin-top: 50px;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	font-size: large;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".currentloc, .otherloc, .current, .other {\r\n");
      out.write("	background-color: white;\r\n");
      out.write("	border-radius: 10px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	transition: background-color 0.3s ease;\r\n");
      out.write("	font-family: 'Noto Sans', sans-serif;\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".currentloc button, .otherloc button {\r\n");
      out.write("	border: 2px solid gainsboro;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".currentloc {\r\n");
      out.write("	margin-top: 20px;\r\n");
      out.write("	height: 100px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".otherloc {\r\n");
      out.write("	margin-top: 50px;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	justify-content: space-around;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".current {\r\n");
      out.write("	margin-top: 30px;\r\n");
      out.write("	height: 70px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".other {\r\n");
      out.write("	height: 240px;\r\n");
      out.write("	padding-bottom: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".currentloc button {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".otherloc button {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	text-align: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".icon-text-wrapper {\r\n");
      out.write("	position: relative;\r\n");
      out.write("	top: 5px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"outerDiv\">\r\n");
      out.write("		<div class=\"locationset\">\r\n");
      out.write("			<div class=\"juso\">\r\n");
      out.write("\r\n");
      out.write("					주소 설정\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"find\">\r\n");
      out.write("			어디에 있는 병원을 찾으세요?\r\n");
      out.write("\r\n");
      out.write("			<div class=\"currentloc\">\r\n");
      out.write("				<button class=\"current\" id=\"currentAddress\">\r\n");
      out.write("					");
      out.write("\r\n");
      out.write("					<span class=\"icon-text-wrapper\"> <span\r\n");
      out.write("						class=\"material-symbols-outlined\"> location_searching </span>\r\n");
      out.write("					</span> 현재 위치에서 병원 찾기\r\n");
      out.write("				</button>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<script type=\"text/javascript\"\r\n");
      out.write("				src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=0f92754065fd18fb9b2450d8077e930c&libraries=services\"></script>\r\n");
      out.write("			<script src=\"https://code.jquery.com/jquery-3.7.1.js\"></script>\r\n");
      out.write("			<script>\r\n");
      out.write("var geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("\r\n");
      out.write("var latitude;   // 위도\r\n");
      out.write("var longitude; // 경도\r\n");
      out.write("\r\n");
      out.write("function success({ coords, timestamp }) {\r\n");
      out.write("    latitude = coords.latitude;   // 위도\r\n");
      out.write("    longitude = coords.longitude; // 경도\r\n");
      out.write("    \r\n");
      out.write("    console.log(`위도: ${latitude}, 경도: ${longitude}, 위치 반환 시간: ${timestamp}`);\r\n");
      out.write("    //위도경도\r\n");
      out.write("    var coord = new kakao.maps.LatLng(latitude, longitude);\r\n");
      out.write("    geocoder.coord2Address(coord.getLng(), coord.getLat(), callback);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function getUserLocation() {\r\n");
      out.write("    if (!navigator.geolocation) {\r\n");
      out.write("        throw \"위치 정보가 지원되지 않습니다.\";\r\n");
      out.write("    }\r\n");
      out.write("    navigator.geolocation.getCurrentPosition(success);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("var callback = function(result, status) {\r\n");
      out.write("    if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("    	  var addressName = result[0].address.address_name; //변수에 주소를 저장\r\n");
      out.write("    	  addressName += \",\"+latitude+\":\"+longitude;\r\n");
      out.write("    	  console.log(latitude)\r\n");
      out.write("    	  console.log(longitude)\r\n");
      out.write("    	  console.log(addressName)\r\n");
      out.write("    	  window.opener.postMessage(addressName,\"*\"); //전달하기\r\n");
      out.write("    	  \r\n");
      out.write("    	  window.close(); //전달하고 창 닫힘\r\n");
      out.write("    }\r\n");
      out.write("   \r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("$(\"#currentAddress\").click(function() {\r\n");
      out.write("	getUserLocation();	\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			<div class=\"otherloc\">\r\n");
      out.write("				<button class=\"other\" onclick=\"execDaumPostcode()\">\r\n");
      out.write("					<img src=\"image?file=hospital1.jpg\" height=\"250\" width=\"150\"\r\n");
      out.write("						alt=\"병원이미지\"> 다른 위치에서 병원 찾기 <br> <br>\r\n");
      out.write("				</button>\r\n");
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script\r\n");
      out.write("		src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("	var geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("	function execDaumPostcode() {\r\n");
      out.write("\r\n");
      out.write("		new daum.Postcode({\r\n");
      out.write("			oncomplete: function (data) {\r\n");
      out.write("				geocoder.addressSearch(data.address, function(result,\r\n");
      out.write("						status) {\r\n");
      out.write("					if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("						//주소를 좌표로변환한 결과에서 위도와 경도를 얻어온다\r\n");
      out.write("						var latitude = result[0].y;\r\n");
      out.write("						var longitude = result[0].x;\r\n");
      out.write("						var letlon = latitude+\":\"+longitude;\r\n");
      out.write("						window.opener.postMessage(data.address+\",\"+letlon,\"*\"); //전달하기\r\n");
      out.write("			  	    	window.close(); //전달하고 창 닫힘\r\n");
      out.write("					} else {\r\n");
      out.write("						console.error('오류');\r\n");
      out.write("\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("		}).open();\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
